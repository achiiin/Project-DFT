hist(training$capitalAve,main="",xlab="ave. capital run length")
set.seed(13343)
# Make some values NA
training$capAve <- training$capitalAve
selectNA <- rbinom(dim(training)[1],size=1,prob=0.05)==1
training$capAve[selectNA] <- NA
preObj <- preProcess(training[,-58],method="knnImpute")
capAve <- predict(preObj,training[,-58])$capAve
library(ISLR); library(caret); data(Wage);
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
View(inTrain)
?dummyVars
table(training$jobclass)
dummies <- dummyVars(wage ~ jobclass,data=training)
head(predict(dummies,newdata=training))
dummies
nsv <- nearZeroVar(training,saveMetrics=TRUE)
nsv
head(training)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
M <- abs(cor(training[,-58]))
diag(M) <- 0
M
View(M)
which(M > 0.8,arr.ind=T)
which(M > 0.8,arr.ind=T)
names(spam)[c(34,32)]
names(spam)
names(spam)[32]
names(spam)[32,34]
plot(spam[,34],spam[,32])
smallSpam <- spam[,c(34,32)]
prComp <- prcomp(smallSpam)
plot(prComp$x[,1],prComp$x[,2])
head(prComp)
dim(prComp)
View(prComp)
prComp
typeColor <- ((spam$type=="spam")*1 + 1)
prComp <- prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1],prComp$x[,2],col=typeColor,xlab="PC1",ylab="PC2")
head(typeColor)
preProc <- preProcess(log10(training[,-58]+1),method="pca",pcaComp=2)
trainPC <- predict(preProc,log10(training[,-58]+1))
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
library(caret);data(faithful); set.seed(333)
inTrain <- createDataPartition(y=faithful$waiting,
p=0.5, list=FALSE)
trainFaith <- faithful[inTrain,]; testFaith <- faithful[-inTrain,]
head(trainFaith)
lm1 <- lm(eruptions ~ waiting,data=trainFaith)
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lines(trainFaith$waiting,lm1$fitted,lwd=3)
?par
pred1 <- predict(lm1,newdata=testFaith,interval="prediction")
ord <- order(testFaith$waiting)
?order
summary(lm1)
library(ISLR); library(ggplot2); library(caret);
data(Wage); Wage <- subset(Wage,select=-c(logwage))
summary(Wage)
library(ISLR); library(ggplot2); library(caret);
data(Wage); Wage <- subset(Wage,select=-c(logwage))
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
dim(training); dim(testing)
featurePlot(x=training[,c("age","education","jobclass")],
y = training$wage,
plot="pairs")
qplot(age,wage,colour=education,data=training)
modFit<- train(wage ~ age + jobclass + education,
method = "lm",data=training)
finMod <- modFit$finalModel
print(modFit)
modFit
coef(finMod)
plot(finMod,1,pch=19,cex=0.5,col="#00000010")
plot(finMod,1,pch=19,cex=0.5,col="#00000010")
plot(finMod,1,pch=19,cex=1,col="#00000010")
plot(finMod,1,pch=19,cex=1,col="#00000018")
plot(finMod$residuals,pch=19)
plot(finMod$residuals,pch=18)
plot(finMod$residuals,pch=19)
plot(finMod$residuals)
modFitAll<- train(wage ~ .,data=training,method="lm")
pred <- predict(modFitAll, testing)
qplot(wage,pred)
modFitAll<- train(wage ~ .,data=training,method="lm")
pred <- predict(modFitAll, testing)
qplot(testing$wage,pred)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
set.seed(32343)
modelFit <- train(type ~.,data=training, method="glm")
modelFit
head(training$type)
library(caret);data(faithful); set.seed(333)
inTrain <- createDataPartition(y=faithful$waiting,
p=0.5, list=FALSE)
trainFaith <- faithful[inTrain,]; testFaith <- faithful[-inTrain,]
head(trainFaith)
lm1 <- lm(eruptions ~ waiting,data=trainFaith)
summary(lm1)
lm1$fitted
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lines(trainFaith$waiting,lm1$fitted,lwd=3)
?subset
library(ISLR); library(ggplot2); library(caret);
data(Wage)
wwww <- subset(Wage,select=-c(logwage))
names(Wage)
head(Wage$logwage)
head(Wage$wage)
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
dim(training); dim(testing)
modFit<- train(wage ~ age + jobclass + education,
method = "lm",data=training)
finMod <- modFit$finalModel
print(modFit)
pred <- predict(modFit, testing)
qplot(wage,pred,colour=year,data=testing)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
summary(predictors)
str(preditors)
str(predictors)
summary(diagnosis)
adData = data.frame(diagnosis,predictors)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(createDataPartition(mixtures$CompressiveStrength, p = 3/4))
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)
training2 = mixtures[ inTrain,]
testing2 = mixtures[-inTrain,]
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)
str(inTrain)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(mixtures$CompressiveStrength,pch=19)
qplot(mixtures$CompressiveStrength,pch=19)
plot(mixtures$CompressiveStrength,pch=19)
library(ggplot2)
qplot(mixtures$CompressiveStrength,pch=19)
plot(mixtures$CompressiveStrength,pch=19)
qplot(mixtures$CompressiveStrength,index,pch=19)
plot(mixtures$CompressiveStrength,pch=19)
library(Hmisc )
?cut2
cut2(mixtures$Age,5)
cut2(mixtures$Age,2)
max(mixtures$Age)
str(cut2(mixtures$Age,2))
summary(cut2(mixtures$Age,2))
summary(cut2(mixtures$Age,5))
summary(cut2(mixtures$Age,g=5))
?plot
qplot(y=mixtures$CompressiveStrength,x=range(len(mixtures)))
qplot(y=mixtures$CompressiveStrength,x=range(length(mixtures)))
range(length(mixtures)
)
length(mixtures)
length(mixtures$CompressiveStrength)
qplot(y=mixtures$CompressiveStrength,x=range(length(mixtures$CompressiveStrength)))
range(length(mixtures$CompressiveStrength))
?seq
seq(length(mixtures$CompressiveStrength))
qplot(y=mixtures$CompressiveStrength,x=seq(length(mixtures$CompressiveStrength)))
xindex <- seq(length(mixtures$CompressiveStrength))
qplot(y=CompressiveStrength,x=xindex,colour=Age,data=mixtures)
qplot(y=CompressiveStrength,x=xindex,colour=FlyAsh,data=mixtures)
mixtures%rownames
mixtures%rowname
xindex <- seq(length(training$CompressiveStrength))
qplot(y=CompressiveStrength,x=xindex,colour=FlyAsh,data=training)
a <- runif(100); b <- cut2(a, g=6)
summary(b)
plot(a, col = b)
qplot(y=CompressiveStrength,x=xindex,colour=Age,data=training)
qplot(y=CompressiveStrength,x=xindex,colour=Cement,data=training)
qplot(y=CompressiveStrength,x=xindex,colour=BlastFurnaceSlag,data=training)
qplot(y=CompressiveStrength,x=xindex,colour=water,data=training)
qplot(y=CompressiveStrength,x=xindex,colour=Water,data=training)
qplot(y=CompressiveStrength,x=xindex,colour=Superplasticizer,data=training)
mixtures <- data.frame(cut=cut2(mixtures$Age,g=4),mixtures)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(y=CompressiveStrength,x=xindex,colour=cut,data=training)
mixtures <- data.frame(cut=cut2(mixtures$FlyAsh,g=4),mixtures)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(y=CompressiveStrength,x=xindex,colour=cut,data=training)
mixtures <- data.frame(cut=cut2(mixtures$Age,g=4),mixtures)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(y=CompressiveStrength,x=xindex,colour=cut,data=training)
?del
?delete
mixtures<- mixtures[-cut]
mixtures<- mixtures[-c(cut)]
mixtures<- mixtures[-c('cut')]
mixtures<- subset(mixtures,select = -c('cut'))
mixtures<- subset(mixtures,select = -c(cut))
mixtures<- subset(mixtures,select = -c(cut.1))
mixtures<- subset(mixtures,select = -c(cut.2))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
names(mixtures)
source('~/.active-rstudio-document', echo=TRUE)
names(mixtures)
source('~/.active-rstudio-document', echo=TRUE)
names(mixtures)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
xindex
?xindex
source('D:/Achiiin/Dropbox/LAB/Course_DataScience/Course_Practical Machine Learning/Quiz/quiz2_Q2.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
names(trainging)
names(training)
source('~/.active-rstudio-document', echo=TRUE)
names(training)
source('~/.active-rstudio-document', echo=TRUE)
summary(mixtures$Superplasticizer)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
names(training)
summary(training$diagnosis)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(M)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?preProcess
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
preProc
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
diagnosis
inTrain
createDataPartition(adData$diagnosis, p = 3/4)
class(createDataPartition(adData$diagnosis, p = 3/4))
class(inTrain)
str(createDataPartition(adData$diagnosis, p = 3/4))
str(inTrain)
names(inTrain)
names(training)
source('~/.active-rstudio-document', echo=TRUE)
names(trainingIL)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
str(testPC)
summary(modelFit)
summary(testPC$diagnosis)
testPC$diagnosis
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
data(iris)
library(ggplot2)
name(iris)
names(iris)
table(iris$Species)
x11 <- table(iris$Species)
x11
x11[1]
class(x11)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
library(caret)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
modFit <- train(Species ~ .,method="rpart",data=training)
modFit
modFit$finalModel
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages('rattle')
install.packages('rattle')
library(rattle)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(ElemStatLearn); data(ozone,package="ElemStatLearn")
ozone <- ozone[order(ozone$ozone),]
head(ozone)
install.packages(ElemStatLearn)
install.packages("ElemStatLearn")
setwd("D:/Achiiin/Dropbox/LAB/DFT result comparison/DFT_private/042715_MachineLearning_dataset")
source('~/.active-rstudio-document')
View(SMILES_BB)
?gsub
source('D:/Achiiin/Dropbox/LAB/DFT result comparison/DFT_private/042715_MachineLearning_dataset/042715_MachineLearning.R')
source('D:/Achiiin/Dropbox/LAB/DFT result comparison/DFT_private/042715_MachineLearning_dataset/042715_MachineLearning.R')
View(SMILES_BB
)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('D:/Achiiin/Dropbox/LAB/DFT result comparison/DFT_private/042715_MachineLearning_dataset/042715_MachineLearning.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(SMILES_BB)
source('~/.active-rstudio-document')
View(SMILES_BB)
source('~/.active-rstudio-document')
View(SMILES_BB)
closeAllConnections()
head_con2 <- 'SMILES,B01,B02,B03,B04,B05,B06,B07,B08,B09,B010,B11,B12,B13,B14,B15,
B16,B17,B18,B19,B20,B21,B22,B23,B24,B25,B26'
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(SMILES_BB)
View(SMILES_BB)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
?break
?substr
oneline
oneLine
oneLine
gregexpr(pattern =',',oneLine)
gregexpr(pattern =',',oneLine)[1]
gregexpr(pattern =',',oneLine)[1][1]
regexpr(",",oneLine)
regexpr(",",oneLine) [1]
num_1 <- regexpr(",",oneLine) [1]
source('~/.active-rstudio-document')
str_1
str_2
source('~/.active-rstudio-document')
str_1
str_2
source('~/.active-rstudio-document')
str_2
paste(str_1,str_2)
paste(str_1,str_2,sep = "")
source('D:/Achiiin/Dropbox/LAB/DFT result comparison/DFT_private/042715_MachineLearning_dataset/042715_reformat.R')
View(SMILES_BB)
?regexpr
setwd("D:/Achiiin/Dropbox/LAB/Course_DataScience/Course_Practical Machine Learning/project")
training_1 <- read.csv(file = "pml-training.csv")
testing_1 <- read.csv(file = "pml-testing.csv")
View(training_1)
setwd("D:/Achiiin/Dropbox/LAB/DFT result comparison/DFT_private/042715_MachineLearning_dataset")
df_1 <- read.csv('DFT_HOMO_BP86s_1percent_allflavors_1outlier0fitted.csv')
View(df_1)
setwd("D:/Achiiin/Dropbox/LAB/DFT result comparison/DFT_private/042815_ML")
source('D:/Achiiin/Dropbox/LAB/DFT result comparison/DFT_private/042815_ML/DFT_predict.R')
source('D:/Achiiin/Dropbox/LAB/DFT result comparison/DFT_private/042815_ML/DFT_predict.R')
df_bb$SMILES == df_outlier$SMILES
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('D:/Achiiin/Dropbox/LAB/DFT result comparison/DFT_private/042815_ML/DFT_predict.R')
source('~/.active-rstudio-document')
df_bb$SMILES == df_outlier$SMILES
aa <- df_bb$SMILES == df_outlier$SMILES
aa
FALSE %in% aa
TRUE %in% aa
! FALSE %in% aa
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('D:/Achiiin/Dropbox/LAB/DFT result comparison/DFT_private/042815_ML/DFT_predict.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('D:/Achiiin/Dropbox/LAB/DFT result comparison/DFT_private/042815_ML/DFT_predict.R')
source('~/.active-rstudio-document')
df_bb$SMILES == df_outlier$SMILES
source('D:/Achiiin/Dropbox/LAB/DFT result comparison/DFT_private/042815_ML/DFT_predict.R')
source('D:/Achiiin/Dropbox/LAB/DFT result comparison/DFT_private/042815_ML/DFT_predict.R')
table(df_bb$SMILES == df_outlier$SMILES)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
#### data preparation ####
set.seed(1990)
bad <- is.na(df_bb$Class)
df_bb <- df_bb[!-bad,]
inTrain = createDataPartition(df_bb$CompressiveStrength, p = 3/5)[[1]]
training = df_bb[ inTrain,]
testing = df_bb[-inTrain,]
set.seed(1990)
bad <- is.na(df_bb$Class)
df_bb <- df_bb[!-bad,]
inTrain = createDataPartition(df_bb$Classe, p = 3/5)[[1]]
training = df_bb[ inTrain,]
testing = df_bb[-inTrain,]
set.seed(1990)
bad <- is.na(df_bb$Class)
df_bb <- df_bb[!-bad,]
inTrain = createDataPartition(df_bb$Class, p = 3/5)[[1]]
training = df_bb[ inTrain,]
testing = df_bb[-inTrain,]
summary(df_bb$class)
summary(df_bb$Class)
source('~/.active-rstudio-document')
summary(df_bb$Class)
summary(training$Class)
1752/1975
1052/1185
summary(testing$Class)
700/790
source('D:/Achiiin/Dropbox/LAB/DFT result comparison/DFT_private/042815_ML/DFT_predict.R')
summary(testing$Class)
source('D:/Achiiin/Dropbox/LAB/DFT result comparison/DFT_private/042815_ML/DFT_predict.R')
training = df_bb[ inTrain,-c(SMILES)]
training = df_bb[ inTrain,-c("SMILES")]
training = df_bb[ inTrain,-SMILES]
names(training)
training = df_bb[ inTrain,-c(1)]
source('D:/Achiiin/Dropbox/LAB/DFT result comparison/DFT_private/042815_ML/DFT_predict.R')
alarm()
#### data preparation ####
set.seed(1990)
bad <- is.na(df_bb$Class)
df_bb <- df_bb[!bad,]
inTrain = createDataPartition(df_bb$Class, p = 3/5)[[1]]
training = df_bb[ inTrain,-c(1)]
testing_1 = df_bb[-inTrain,-c(1)]
inTest = createDataPartition(testing_1$Class, p = 1/2)[[1]]
testing = testing_1[inTest,]
validation = testing_1[-inTest,]
summary(validation$Class)
350/395
summary(testing$Class)
350/395
Fit_glm <- train(Class~.,data=training,method = 'glm')
print(Fit_rf$finalModel)
Fit_glm$finalModel
Fit_glm
